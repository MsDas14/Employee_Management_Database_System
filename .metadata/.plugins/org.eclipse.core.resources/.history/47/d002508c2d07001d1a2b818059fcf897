package com.employee.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.employee.entity.Project;
import com.employee.exception.UserNotFoundException;
import com.employee.repository.ProjRepo;


@RestController
@RequestMapping("/api/project/")
@CrossOrigin("http://localhost:3000")

public class ProjectController {

	
	@Autowired
	private ProjRepo repo;
	
	@GetMapping("/getProjects")
	List<Project> getProjects(){
		return repo.findAll();
	}
	
	@GetMapping("getProject/{id}")
	Project getProjbyId(@PathVariable Long id) {
		System.out.println(id);
		return repo.findById(id).orElseThrow(()->new UserNotFoundException(id));
	}
	
	@PostMapping("/newProject")
	Project newProject(@RequestBody Project newProject) {
		return repo.save(newProject);
	}
	
	@PutMapping("/updateProject/{id}")
	Project updateProject(@RequestBody Project newProj, @PathVariable Long id) {
		return repo.findById(id).map(pro -> {pro.setName(newProj.getName());
											 pro.setEcount(newProj.getEcount());
											 pro.setS_date(newProj.getS_date());
											 pro.setE_date(newProj.getE_date());
											 return repo.save(pro);
											}).orElseThrow(() -> new UserNotFoundException(id));
	}
	
	@DeleteMapping("project/{id}")
	String deleteProject(@PathVariable Long id) {
		if(!repo.existsById(id)) {
			throw new UserNotFoundException(id);
		}
		else {
			repo.deleteById(id);
			return "User with id "+id+" has been deleted.";
		}
	}
	
}
